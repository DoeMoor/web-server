// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        id,
        created_at,
        updated_at,
        email,
        hashed_password
    )
VALUES
    (gen_random_uuid (), now(), now(), $1, $2)
RETURNING
    id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM
    users
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, created_at, updated_at, email, hashed_password, is_chirpy_red
FROM
    users
WHERE
    id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const isUserIdExists = `-- name: IsUserIdExists :one
SELECT
    EXISTS (
        SELECT
            id
        FROM
            users
        WHERE
            id = $1
    )
`

func (q *Queries) IsUserIdExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserIdExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    updated_at = now(),
    email = $2,
    hashed_password = $3
WHERE
    id = $1
RETURNING
    id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateUserParams struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserMembershipChirpyRed = `-- name: UpdateUserMembershipChirpyRed :one
UPDATE users
SET
    is_chirpy_red = $1,
    updated_at = now()
WHERE
    id = $2
RETURNING
    id
`

type UpdateUserMembershipChirpyRedParams struct {
	IsChirpyRed bool      `json:"is_chirpy_red"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserMembershipChirpyRed(ctx context.Context, arg UpdateUserMembershipChirpyRedParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateUserMembershipChirpyRed, arg.IsChirpyRed, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
